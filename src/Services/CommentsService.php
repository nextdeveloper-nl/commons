<?php

namespace NextDeveloper\Commons\Services;

use NextDeveloper\Commons\Database\Filters\CommentsQueryFilter;
use NextDeveloper\Commons\Database\Models\Comments;
use NextDeveloper\Commons\Services\AbstractServices\AbstractCommentsService;
use NextDeveloper\IAM\Database\Scopes\AuthorizationScope;
use NextDeveloper\IAM\Helpers\UserHelper;

/**
 * This class is responsible from managing the data for Comments
 *
 * Class CommentsService.
 *
 * @package NextDeveloper\Commons\Database\Models
 */
class CommentsService extends AbstractCommentsService
{

    // EDIT AFTER HERE - WARNING: ABOVE THIS LINE MAY BE REGENERATED AND YOU MAY LOSE CODE
    public static function get(CommentsQueryFilter $filter = null, array $params = []): \Illuminate\Database\Eloquent\Collection|\Illuminate\Contracts\Pagination\LengthAwarePaginator
    {
        $object = request()->get('objectType');

        $object = explode('\\', $object);
        $object = $object[0] . '\\' . $object[1] . '\\Database\\Models\\' . $object[2];

        $comments = Comments::withoutGlobalScope(AuthorizationScope::class)
            ->where('object_type', $object)
            ->where('object_uuid', request()->get('objectId'))
            ->paginate();

        return $comments;
    }

    public static function create(array $data)
    {
        $object = explode('\\', $data['object_type']);

        if(count($object) != 3) {
            throw new \Exception("The object type is not valid. It should be in format Vendor\Package\ModelName");
        }

        $object = '\\' . $object[0] . '\\' . $object[1] . '\Database\\Models\\' . $object[2];

        $app = app($object);

        if(!$app) {
            throw new \Exception("The object type is not valid. It should be in format Vendor\Package\ModelName");
        }

        $object = $app->where('uuid', $data['object_id'])->first();

        if(!$object) {
            throw new \Exception("The object you are trying to comment does not exist or you dont have access to it.");
        }

        $data['object_id'] = $object->id;
        $data['object_uuid'] = $object->uuid;
        $data['object_type'] = $object::class;

        return parent::create($data); // TODO: Change the autogenerated stub
    }

    public static function createSystemComment($comment, $object)
    {
        $class = explode('\\', get_class($object));

        CommentsService::create([
            'body'  =>  $comment,
            'object_type'   =>  $class[0] . '\\' . $class[1] . '\\' . $class[4],
            'object_id' =>  $object->uuid,
            'iam_user_id'   =>  UserHelper::getWithEmail(config('commons.configuration.system_user_email'))->id
        ]);
    }
}
