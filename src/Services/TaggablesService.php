<?php

namespace NextDeveloper\Commons\Services;

use Illuminate\Database\QueryException;
use NextDeveloper\Commons\Database\Models\Domains;
use NextDeveloper\Commons\Database\Models\Taggables;
use NextDeveloper\Commons\Database\Models\Tags;
use NextDeveloper\Commons\Exceptions\ModelNotFoundException;
use NextDeveloper\Commons\Helpers\TagHelper;
use NextDeveloper\Commons\Services\AbstractServices\AbstractTaggablesService;
use NextDeveloper\IAM\Helpers\UserHelper;

/**
* This class is responsible from managing the data for Taggables
*
* Class TaggablesService.
*
* @package NextDeveloper\Commons\Database\Models
*/
class TaggablesService extends AbstractTaggablesService {

    // EDIT AFTER HERE - WARNING: ABOVE THIS LINE MAY BE REGENERATED AND YOU MAY LOSE CODE

    public static function create(array $data)
    {
        $data['object_type'] = (new TagHelper())->getObject($data['object_type']);

        $obj = app($data['object_type'])->where('uuid', $data['object_id'])->first();

        if(!$obj) {
            throw new ModelNotFoundException('Cannot find the domain you are looking for. Make sure that domain'
                . ' is in your account.');
        }

        $data['object_id'] = app($data['object_type'])::where('uuid', $data['object_id'])->first()->id;

        try {
            return parent::create($data); // TODO: Change the autogenerated stub
        } catch (QueryException $exception) {
            //  If we get this exception then this means that we have exactly the same object. So we look at the db
            //  and return back the related object.
            if($exception->getCode() == 23000) {
                $tag = Tags::where('uuid', $data['common_tags_id'])->first();
                $data['common_tags_id'] = $tag->id;
                return Taggables::where($data)->first();
            }
        }
    }
}
